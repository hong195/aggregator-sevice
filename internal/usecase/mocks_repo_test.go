// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/hong195/aggregator-sevice/internal/entity"
	repo "github.com/hong195/aggregator-sevice/internal/repo"
)

// MockDataPacketRepository is a mock of DataPacketRepository interface.
type MockDataPacketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataPacketRepositoryMockRecorder
}

// MockDataPacketRepositoryMockRecorder is the mock recorder for MockDataPacketRepository.
type MockDataPacketRepositoryMockRecorder struct {
	mock *MockDataPacketRepository
}

// NewMockDataPacketRepository creates a new mock instance.
func NewMockDataPacketRepository(ctrl *gomock.Controller) *MockDataPacketRepository {
	mock := &MockDataPacketRepository{ctrl: ctrl}
	mock.recorder = &MockDataPacketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataPacketRepository) EXPECT() *MockDataPacketRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockDataPacketRepository) FindById(ctx context.Context, id uuid.UUID) (entity.DataPacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(entity.DataPacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDataPacketRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDataPacketRepository)(nil).FindById), ctx, id)
}

// FindByPeriod mocks base method.
func (m *MockDataPacketRepository) FindByPeriod(arg0 context.Context, arg1 repo.DataPacketCriteria) ([]entity.DataPacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPeriod", arg0, arg1)
	ret0, _ := ret[0].([]entity.DataPacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPeriod indicates an expected call of FindByPeriod.
func (mr *MockDataPacketRepositoryMockRecorder) FindByPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPeriod", reflect.TypeOf((*MockDataPacketRepository)(nil).FindByPeriod), arg0, arg1)
}

// Store mocks base method.
func (m *MockDataPacketRepository) Store(arg0 context.Context, arg1 entity.DataPacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockDataPacketRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDataPacketRepository)(nil).Store), arg0, arg1)
}
