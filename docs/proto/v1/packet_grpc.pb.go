// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: docs/proto/v1/packet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregationService_FindPacketByID_FullMethodName      = "/grpc.v1.AggregationService/FindPacketByID"
	AggregationService_ListPacketsByPeriod_FullMethodName = "/grpc.v1.AggregationService/ListPacketsByPeriod"
)

// AggregationServiceClient is the client API for AggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregationServiceClient interface {
	FindPacketByID(ctx context.Context, in *FindPacketByIDRequest, opts ...grpc.CallOption) (*FindPacketByIDResponse, error)
	ListPacketsByPeriod(ctx context.Context, in *ListPacketsByPeriodRequest, opts ...grpc.CallOption) (*ListPacketsByPeriodResponse, error)
}

type aggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationServiceClient(cc grpc.ClientConnInterface) AggregationServiceClient {
	return &aggregationServiceClient{cc}
}

func (c *aggregationServiceClient) FindPacketByID(ctx context.Context, in *FindPacketByIDRequest, opts ...grpc.CallOption) (*FindPacketByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPacketByIDResponse)
	err := c.cc.Invoke(ctx, AggregationService_FindPacketByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregationServiceClient) ListPacketsByPeriod(ctx context.Context, in *ListPacketsByPeriodRequest, opts ...grpc.CallOption) (*ListPacketsByPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPacketsByPeriodResponse)
	err := c.cc.Invoke(ctx, AggregationService_ListPacketsByPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationServiceServer is the server API for AggregationService service.
// All implementations must embed UnimplementedAggregationServiceServer
// for forward compatibility.
type AggregationServiceServer interface {
	FindPacketByID(context.Context, *FindPacketByIDRequest) (*FindPacketByIDResponse, error)
	ListPacketsByPeriod(context.Context, *ListPacketsByPeriodRequest) (*ListPacketsByPeriodResponse, error)
	mustEmbedUnimplementedAggregationServiceServer()
}

// UnimplementedAggregationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregationServiceServer struct{}

func (UnimplementedAggregationServiceServer) FindPacketByID(context.Context, *FindPacketByIDRequest) (*FindPacketByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPacketByID not implemented")
}
func (UnimplementedAggregationServiceServer) ListPacketsByPeriod(context.Context, *ListPacketsByPeriodRequest) (*ListPacketsByPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPacketsByPeriod not implemented")
}
func (UnimplementedAggregationServiceServer) mustEmbedUnimplementedAggregationServiceServer() {}
func (UnimplementedAggregationServiceServer) testEmbeddedByValue()                            {}

// UnsafeAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationServiceServer will
// result in compilation errors.
type UnsafeAggregationServiceServer interface {
	mustEmbedUnimplementedAggregationServiceServer()
}

func RegisterAggregationServiceServer(s grpc.ServiceRegistrar, srv AggregationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregationService_ServiceDesc, srv)
}

func _AggregationService_FindPacketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPacketByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).FindPacketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_FindPacketByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).FindPacketByID(ctx, req.(*FindPacketByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregationService_ListPacketsByPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPacketsByPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).ListPacketsByPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_ListPacketsByPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).ListPacketsByPeriod(ctx, req.(*ListPacketsByPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregationService_ServiceDesc is the grpc.ServiceDesc for AggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.v1.AggregationService",
	HandlerType: (*AggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPacketByID",
			Handler:    _AggregationService_FindPacketByID_Handler,
		},
		{
			MethodName: "ListPacketsByPeriod",
			Handler:    _AggregationService_ListPacketsByPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/proto/v1/packet.proto",
}
